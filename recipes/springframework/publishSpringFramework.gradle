import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

apply plugin: 'base' // add clean task
apply plugin: 'ivy-publish'

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'org.apache.ivy:ivy:2.4.0'
        classpath 'com.jcraft:jsch:0.1.53'
    }
}

def version = '4.2.4.RELEASE'

task rewriteJar {
    tasks['publish'].dependsOn('rewriteJar')
    String jarFileName = file("org.springframework.test_${version}/target/org.springframework.test-${version}.jar").path
    doLast() {
        ZipFile jarFile = new ZipFile(jarFileName)
        println "------------"
        println "Cloning content of jar file ${jarFileName}:"
        println "------------"
        new ZipFile(jarFileName).entries().findAll{ !it.directory }.each { println it.name }
        println "------------"
        String cloneFileName = new File(jarFileName).path + "-clone"
        FileOutputStream fos = new FileOutputStream(cloneFileName)

        String manifest
        jarFile.entries().findAll { it.name == "META-INF/MANIFEST.MF" }.each {
            manifest = jarFile.getInputStream(it).text
        }
        println "------------"
        println manifest
        println "------------"

        JarOutputStream jarOutputStream = new JarOutputStream(fos,
                new java.util.jar.Manifest(new ByteArrayInputStream(manifest.getBytes(java.nio.charset.Charset.forName("UTF-8")))))

        println "------------"
        byte[] readBuffer = new byte[2156]
        jarFile.entries().findAll { !it.directory && !(it.name == "META-INF/MANIFEST.MF") && !(it.name.contains("TransactionalTestExecutionListener")) }.each {
            println "adding ${it.name} to ${cloneFileName}"
            jarOutputStream.putNextEntry(new JarEntry(it.name))
            jarOutputStream << jarFile.getInputStream(it)
        }
        jarOutputStream.finish()
        println "finished writing ${cloneFileName}"
        println "------------"

        println "from ${cloneFileName} to ${jarFileName}"
        println "within ${file(cloneFileName).parentFile.path} is ${file(cloneFileName).name}"
        println "rename ${file(cloneFileName).name} -> ${file(jarFileName).name}"

        delete file(jarFileName)
        copy {
            from file(file(cloneFileName).parentFile.path)
            into file(file(cloneFileName).parentFile.path)
            rename { String fileName ->
                fileName.replace(file(cloneFileName).name, file(jarFileName).name)
            }
        }
        delete file(cloneFileName)
        println "------------"
        println "Removed 'TransactionalTestExecutionListener' from content of jar file ${jarFileName}:"
        println "------------"
        new ZipFile(jarFileName).entries().findAll{ !it.directory }.each { println it.name }
        println "------------"
    }
}

publishing {
    publications {
        aop(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.aop'
            revision "${version}"
            artifact(file("org.springframework.aop_${version}/target/org.springframework.aop-${version}.jar"))
        }
        aspects(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.aspects'
            revision "${version}"
            artifact(file("org.springframework.aspects_${version}/target/org.springframework.aspects-${version}.jar"))
        }
        beans(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.beans'
            revision "${version}"
            artifact(file("org.springframework.beans_${version}/target/org.springframework.beans-${version}.jar"))
        }
        context(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.context'
            revision "${version}"
            artifact(file("org.springframework.context_${version}/target/org.springframework.context-${version}.jar"))
        }
        contextSupport(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.context.support'
            revision "${version}"
            artifact(file("org.springframework.context.support_${version}/target/org.springframework.context.support-${version}.jar"))
        }
        core(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.core'
            revision "${version}"
            artifact(file("org.springframework.core_${version}/target/org.springframework.core-${version}.jar"))
        }
        expression(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.expression'
            revision "${version}"
            artifact(file("org.springframework.expression_${version}/target/org.springframework.expression-${version}.jar"))
        }
        jdbc(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.jdbc'
            revision "${version}"
            artifact(file("org.springframework.jdbc_${version}/target/org.springframework.jdbc-${version}.jar"))
        }
        jms(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.jms'
            revision "${version}"
            artifact(file("org.springframework.jms_${version}/target/org.springframework.jms-${version}.jar"))
        }
        messaging(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.messaging'
            revision "${version}"
            artifact(file("org.springframework.messaging_${version}/target/org.springframework.messaging-${version}.jar"))
        }
        orm(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.orm'
            revision "${version}"
            artifact(file("org.springframework.orm_${version}/target/org.springframework.orm-${version}.jar"))
        }
        oxm(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.oxm'
            revision "${version}"
            artifact(file("org.springframework.oxm_${version}/target/org.springframework.oxm-${version}.jar"))
        }
        test(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.test'
            revision "${version}"
            artifact(file("org.springframework.test_${version}/target/org.springframework.test-${version}.jar"))
        }
        transaction(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.transaction'
            revision "${version}"
            artifact(file("org.springframework.transaction_${version}/target/org.springframework.transaction-${version}.jar"))
        }
        web(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.web'
            revision "${version}"
            artifact(file("org.springframework.web_${version}/target/org.springframework.web-${version}.jar"))
        }
        webmvc(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.webmvc'
            revision "${version}"
            artifact(file("org.springframework.webmvc_${version}/target/org.springframework.webmvc-${version}.jar"))
        }
        webmvcPortlet(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.webmvc.portlet'
            revision "${version}"
            artifact(file("org.springframework.webmvc.portlet_${version}/target/org.springframework.webmvc.portlet-${version}.jar"))
        }
        websocket(IvyPublication) {
            organisation 'org.eclipse.virgo.mirrored'
            module 'org.springframework.websocket'
            revision "${version}"
            artifact(file("org.springframework.websocket_${version}/target/org.springframework.websocket-${version}.jar"))
        }
    }

    repositories {
        ivy { url "$buildDir" }
    }
}
